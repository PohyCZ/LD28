// Generated by CoffeeScript 1.6.3
(function() {
  window.Keys = (function() {
    function Keys() {
      var _this = this;
      this.debug = true;
      this.keys = [];
      $(document.body).on("keydown", function(e) {
        var k;
        k = e.charCode || e.keyCode;
        if (_this.keyNotPressed(k)) {
          _this.keys.push(k);
        }
        if (_this.debug) {
          return console.log(_this.keys);
        }
      });
      $(document.body).on("keyup", function(e) {
        var k;
        k = e.charCode || e.keyCode;
        if (_this.keyPressed(k)) {
          _this.keys.splice(_this.keys.indexOf(k), 1);
        }
        if (_this.debug) {
          return console.log(_this.keys);
        }
      });
    }

    Keys.prototype.keyNotPressed = function(k) {
      return this.keys.indexOf(k) === -1;
    };

    Keys.prototype.keyPressed = function(k) {
      return this.keys.indexOf(k) !== -1;
    };

    return Keys;

  })();

  window.Mouse = (function() {
    function Mouse(canvasId) {
      var _this = this;
      this.debug = false;
      this.canvas = document.getElementById(canvasId);
      this.x = 0;
      this.y = 0;
      this.button = false;
      $(document.body).on("mousemove", function(e) {
        var rect;
        rect = _this.canvas.getBoundingClientRect();
        _this.x = Math.floor(e.clientX - rect.left);
        _this.y = Math.floor(e.clientY - rect.top);
        if (_this.debug) {
          return console.log(_this.coords);
        }
      });
      $(document.body).on("mousedown", function() {
        _this.button = true;
        if (_this.debug) {
          return console.log(_this.button);
        }
      });
      $(document.body).on("mouseup", function() {
        _this.button = false;
        if (_this.debug) {
          return console.log(_this.button);
        }
      });
    }

    return Mouse;

  })();

}).call(this);
